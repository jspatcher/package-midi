{"version":3,"file":"index.jspatpkg.js","mappings":"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","sources":["webpack://@jspatcher/package-midi/./src/index.ts","webpack://@jspatcher/package-midi/./src/objects/Base.ts","webpack://@jspatcher/package-midi/./src/objects/devices.ts","webpack://@jspatcher/package-midi/./src/objects/makeNote.ts","webpack://@jspatcher/package-midi/./src/objects/midiFormat.ts","webpack://@jspatcher/package-midi/./src/objects/midiIn.ts","webpack://@jspatcher/package-midi/./src/objects/midiOut.ts","webpack://@jspatcher/package-midi/./src/objects/midiParse.ts","webpack://@jspatcher/package-midi/./src/objects/midiSequencer.ts","webpack://@jspatcher/package-midi/./src/package-info.ts","webpack://@jspatcher/package-midi/./src/sdk.ts","webpack://@jspatcher/package-midi/./src/worklets/MidiParser.ts","webpack://@jspatcher/package-midi/./src/worklets/MidiSequencerNode.ts","webpack://@jspatcher/package-midi/./src/worklets/MidiSequencerProcessor.worklet.ts","webpack://@jspatcher/package-midi/./node_modules/worklet-loader/dist/worklets/InlineWorklet.js","webpack://@jspatcher/package-midi/webpack/bootstrap","webpack://@jspatcher/package-midi/webpack/runtime/compat get default export","webpack://@jspatcher/package-midi/webpack/runtime/create fake namespace object","webpack://@jspatcher/package-midi/webpack/runtime/define property getters","webpack://@jspatcher/package-midi/webpack/runtime/hasOwnProperty shorthand","webpack://@jspatcher/package-midi/webpack/runtime/make namespace object","webpack://@jspatcher/package-midi/./src/index.jspatpkg.ts"],"sourcesContent":["import packageInfo from \"./package-info\";\r\nimport type { IExternalPackage } from \"@jspatcher/jspatcher/src/core/GlobalPackageManager\";\r\n\r\nexport const name = packageInfo.name.split(\"/\").pop().replace(/^package-/, '');\r\n\r\nexport const { author, license, keywords, version, description, jspatcher } = packageInfo;\r\n\r\nexport default { name, author, license, keywords, version, description, ...jspatcher } as IExternalPackage;","import { author, name, version, description } from \"../index\";\r\nimport { DefaultObject } from \"../sdk\";\r\n\r\nexport default class MidiObject<\r\n    D = {},\r\n    S = {},\r\n    I extends any[] = any[],\r\n    O extends any[] = any[],\r\n    A extends any[] = any[],\r\n    P = {},\r\n    U = {},\r\n    E = {}\r\n> extends DefaultObject<D, S, I, O, A, P, U, E> {\r\n    static package = name;\r\n    static author = author;\r\n    static version = version;\r\n    static description = description;\r\n}\r\n","import type { IArgsMeta, IInletsMeta, IOutletsMeta, IPropsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\nimport type { StrictDropdownItemProps } from \"semantic-ui-react\";\nimport { Bang, isBang } from \"../sdk\";\nimport MidiObject from \"./Base\";\n\ninterface IS {\n    midiAccess: WebMidi.MIDIAccess;\n}\ninterface P {\n    autoUpdate: boolean;\n}\n\nexport default class midiDevices extends MidiObject<{}, {}, [Bang | WebMidi.MIDIPortType[]], [WebMidi.MIDIPort[], StrictDropdownItemProps[]], WebMidi.MIDIPortType[], P> {\n    static description = \"Enumerate MIDI devices\";\n    static inlets: IInletsMeta = [{\n        isHot: true,\n        type: \"object\",\n        description: \"Bang to enumerate, MIDIPortType[] to use a filter\"\n    }];\n    static outlets: IOutletsMeta = [{\n        type: \"object\",\n        description: \"Array of MIDIPort\"\n    }, {\n        type: \"object\",\n        description: \"Array of DropdownItemProps\"\n    }];\n    static args: IArgsMeta = [{\n        type: \"enum\",\n        varLength: true,\n        optional: true,\n        enums: [\"input\", \"output\"],\n        default: [\"input\", \"output\"],\n        description: \"Output only kinds of devices\"\n    }];\n    static props: IPropsMeta<P> = {\n        autoUpdate: {\n            type: \"boolean\",\n            default: true,\n            description: \"Auto output devices when devices change\"\n        }\n    };\n    _ = { midiAccess: undefined as WebMidi.MIDIAccess };\n    handleDeviceChange = async () => {\n        if (!this.getProp(\"autoUpdate\")) return;\n        const filters = this.args.slice();\n        if (!filters.length) filters.push(\"input\", \"output\");\n        const { midiAccess } = this._;\n        if (!midiAccess) {\n            this.error(\"MIDIAccess not available.\");\n            return;\n        }\n        const devices: WebMidi.MIDIPort[] = [];\n        if (filters.indexOf(\"input\") !== -1) midiAccess.inputs.forEach(v => devices.push(v));\n        if (filters.indexOf(\"output\") !== -1) midiAccess.outputs.forEach(v => devices.push(v));\n        const options = devices.map((d, key) => {\n            const { type, name, id } = d;\n            return { key, icon: { input: \"sign-in\", output: \"sign-out\" }[type], text: name || id, value: id };\n        });\n        this.outletAll([devices, options]);\n    };\n    subscribe() {\n        super.subscribe();\n        this.on(\"preInit\", () => {\n            this.inlets = 1;\n            this.outlets = 2;\n        });\n        this.on(\"postInit\", async () => {\n            try {\n                const midiAccess = await navigator.requestMIDIAccess({ sysex: true });\n                this._.midiAccess = midiAccess;\n                midiAccess.addEventListener(\"statechange\", this.handleDeviceChange);\n                if (this.getProp(\"autoUpdate\")) this.handleDeviceChange();\n            } catch (e) {\n                this.error(e);\n            }\n        });\n        this.on(\"inlet\", async ({ data, inlet }) => {\n            if (inlet === 0) {\n                let filters: WebMidi.MIDIPortType[];\n                if (isBang(data)) {\n                    filters = this.args.slice();\n                    if (!filters.length) filters.push(\"input\", \"output\");\n                } else {\n                    filters = data.slice();\n                }\n                const { midiAccess } = this._;\n                if (!midiAccess) {\n                    this.error(\"MIDIAccess not available.\");\n                    return;\n                }\n                const devices: WebMidi.MIDIPort[] = [];\n                if (filters.indexOf(\"input\") !== -1) midiAccess.inputs.forEach(v => devices.push(v));\n                if (filters.indexOf(\"output\") !== -1) midiAccess.outputs.forEach(v => devices.push(v));\n                const options = devices.map((d, key) => {\n                    const { type, name, id } = d;\n                    return { key, icon: { input: \"sign-in\", output: \"sign-out\" }[type], text: name || id, value: id };\n                });\n                this.outletAll([devices, options]);\n            }\n        });\n        this.on(\"destroy\", () => {\n            if (this._.midiAccess) this._.midiAccess.removeEventListener(\"statechange\", this.handleDeviceChange);\n        });\n    }\n}\n","import type { IArgsMeta, IInletsMeta, IOutletsMeta, IPropsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\r\nimport { Bang, isBang } from \"../sdk\";\r\nimport MidiObject from \"./Base\";\r\n\r\ninterface IS {\r\n    channel: number,\r\n    velocity: number,\r\n    duration: number,\r\n    map: Set<number>[][];\r\n}\r\n\r\ninterface P {\r\n    repeatMode: \"Poly\" | \"Re-trigger\" | \"Stop last\";\r\n}\r\n\r\nexport default class makeNote extends MidiObject<{}, {}, [number | \"clear\" | \"stop\", number, number], [number, number, number], [number?, number?, number?, number?], P> {\r\n    static description = \"Generate a note-on/note-off pair\";\r\n    static inlets: IInletsMeta = [{\r\n        isHot: true,\r\n        type: \"anything\",\r\n        description: 'MIDI-note number to start a note, \"clear\" to cancel future note-offs, \"stop\" to send note-offs now.'\r\n    }, {\r\n        isHot: false,\r\n        type: \"number\",\r\n        description: \"Velocity (0-127)\"\r\n    }, {\r\n        isHot: false,\r\n        type: \"number\",\r\n        description: \"Duration in milliseconds\"\r\n    }, {\r\n        isHot: false,\r\n        type: \"number\",\r\n        description: \"Channel (1-based)\"\r\n    }];\r\n    static outlets: IOutletsMeta = [{\r\n        type: \"number\",\r\n        description: \"Pitch (0-127)\"\r\n    }, {\r\n        type: \"number\",\r\n        description: \"Velocity (0-127)\"\r\n    }, {\r\n        type: \"number\",\r\n        description: \"Channel (1-based)\"\r\n    }];\r\n    static args: IArgsMeta = [{\r\n        type: \"number\",\r\n        optional: false,\r\n        description: \"Initial velocity (0-127)\",\r\n        default: 0\r\n    }, {\r\n        type: \"number\",\r\n        optional: false,\r\n        description: \"Initial duration in milliseconds\",\r\n        default: 0\r\n    }, {\r\n        type: \"number\",\r\n        optional: true,\r\n        description: \"Initial channel (1-based)\",\r\n        default: 1\r\n    }];\r\n    static props: IPropsMeta<P> = {\r\n        repeatMode: {\r\n            type: \"enum\",\r\n            enums: [\"Poly\", \"Re-trigger\", \"Stop last\"],\r\n            description: \"Re-trigger: if the note was already playing, send a note-off and retrigger the note; Stop last: send only one note-off message at the end of the last note.\",\r\n            default: \"Poly\"\r\n        }\r\n    };\r\n    _: IS = {\r\n        velocity: Math.min(127, Math.max(0, ~~+this.args[0])) || 0,\r\n        duration: Math.max(0, +this.args[1]) || 0,\r\n        channel: Math.min(16, Math.max(1, ~~+this.args[2])) || 1,\r\n        map: new Array(16).fill(null).map(() => new Array(128).fill(null).map(() => new Set()))\r\n    };\r\n    subscribe() {\r\n        super.subscribe();\r\n        this.on(\"preInit\", () => {\r\n            this.inlets = 4;\r\n            this.outlets = 3;\r\n        });\r\n        this.on(\"inlet\", async ({ data, inlet }) => {\r\n            if (inlet === 0) {\r\n                if (typeof data === \"number\") {\r\n                    if (isNaN(data)) return;\r\n                    const note = Math.min(127, Math.max(0, ~~+data));\r\n                    const { velocity, duration, channel, map } = this._;\r\n                    const repeatMode = this.getProp(\"repeatMode\");\r\n                    const set = map[channel - 1][note];\r\n                    const ref = window.setTimeout(() => {\r\n                        set.delete(ref);\r\n                        this.outletAll([note, 0, channel]);\r\n                    }, duration);\r\n                    if (set.size) {\r\n                        if (repeatMode === \"Re-trigger\") {\r\n                            set.forEach((ref) => {\r\n                                window.clearTimeout(ref);\r\n                                this.outletAll([note, 0, channel]);\r\n                            });\r\n                            set.clear();\r\n                        } else if (repeatMode === \"Stop last\") {\r\n                            set.forEach((ref) => {\r\n                                window.clearTimeout(ref);\r\n                            });\r\n                            set.clear();\r\n                        }\r\n                    }\r\n                    set.add(ref);\r\n                    this.outletAll([note, velocity, channel]);\r\n                } else if (data === \"clear\") {\r\n                    this._.map.forEach((noteMap) => {\r\n                        noteMap.forEach((set) => {\r\n                            set.forEach(ref => window.clearTimeout(ref));\r\n                            set.clear();\r\n                        })\r\n                    });\r\n                } else if (data === \"stop\") {\r\n                    const repeatMode = this.getProp(\"repeatMode\");\r\n                    this._.map.forEach((noteMap, channel) => {\r\n                        noteMap.forEach((set, note) => {\r\n                            set.forEach(ref => window.clearTimeout(ref));\r\n                            if (repeatMode === \"Stop last\") this.outletAll([note, 0, channel]);\r\n                            else set.forEach(() => this.outletAll([note, 0, channel]));\r\n                            set.clear();\r\n                        })\r\n                    });\r\n                }\r\n            } else if (inlet === 1) {\r\n                this._.velocity = Math.min(127, Math.max(0, ~~+data)) || 0;\r\n            } else if (inlet === 2) {\r\n                this._.duration = Math.max(0, +data) || 0;\r\n            } else if (inlet === 3) {\r\n                this._.channel = Math.min(16, Math.max(1, ~~+data)) || 1;\r\n            }\r\n        });\r\n        this.on(\"destroy\", () => {\r\n            this._.map.forEach((channel) => {\r\n                channel.forEach((note) => {\r\n                    note.forEach(ref => window.clearTimeout(ref));\r\n                    note.clear();\r\n                })\r\n            });\r\n        });\r\n    }\r\n}\r\n","import type { IInletsMeta, IOutletsMeta, IPropsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\r\nimport MidiObject from \"./Base\";\r\n\r\ninterface IS {\r\n    channel: number;\r\n}\r\n\r\ntype I = [Iterable<number>, Iterable<number>, Iterable<number>, number, number, number, number];\r\n\r\ntype O = [Uint8Array];\r\n\r\ninterface P {\r\n    hires: \"off\" | \"float\" | \"14bit\";\r\n}\r\n\r\nexport default class midiFormat extends MidiObject<{}, {}, I, O, [string], P> {\r\n    static description = \"Prepare data in the form of a MIDI message\";\r\n    static outlets: IOutletsMeta = [{\r\n        type: \"object\",\r\n        description: \"Raw MIDI message: Uint8Array\"\r\n    }];\r\n    static inlets: IInletsMeta = [{\r\n        isHot: true,\r\n        type: \"object\",\r\n        description: \"Note-on and Note-off [pitch, velocity]: Iterable<number>\"\r\n    }, {\r\n        isHot: true,\r\n        type: \"object\",\r\n        description: \"Poly Key Pressure [key, value]: Iterable<number>\"\r\n    }, {\r\n        isHot: true,\r\n        type: \"object\",\r\n        description: \"Control Change [controller, value]: Iterable<number>\"\r\n    }, {\r\n        isHot: true,\r\n        type: \"number\",\r\n        description: \"Program Change\"\r\n    }, {\r\n        isHot: true,\r\n        type: \"number\",\r\n        description: \"Aftertouch\"\r\n    }, {\r\n        isHot: true,\r\n        type: \"number\",\r\n        description: \"Pitch Bend\"\r\n    }, {\r\n        isHot: false,\r\n        type: \"number\",\r\n        description: \"MIDI Channel\"\r\n    }];\r\n    static props: IPropsMeta<P> = {\r\n        hires: {\r\n            type: \"enum\",\r\n            enums: [\"off\", \"float\", \"14bit\"],\r\n            default: \"off\",\r\n            description: \"High-resolution Pitch Bend (Off (0-127), Float (-1 to 1), 14-bit Fixed (-8192 to 8191))\"\r\n        }\r\n    };\r\n    _: IS = { channel: 0 };\r\n    subscribe() {\r\n        super.subscribe();\r\n        this.on(\"preInit\", () => {\r\n            this.inlets = 7;\r\n            this.outlets = 1;\r\n        })\r\n        this.on(\"inlet\", ({ data, inlet }) => {\r\n            if (inlet < 3) {\r\n                try {\r\n                    let [data1, data2] = data as Iterable<number>;\r\n                    if (typeof data1 !== \"number\" || typeof data2 !== \"number\") {\r\n                        throw new Error(\"Input MIDI data is not numbers\");\r\n                    }\r\n                    data1 = Math.round(Math.max(0, Math.min(127, data1)));\r\n                    data2 = Math.round(Math.max(0, Math.min(127, data2)));\r\n                    if (inlet === 0) {\r\n                        this.outlet(0, new Uint8Array([0x90 + this._.channel, data1, data2]));\r\n                    } else if (inlet === 1) {\r\n                        this.outlet(0, new Uint8Array([0xa0 + this._.channel, data1, data2]));\r\n                    } else if (inlet === 2) {\r\n                        this.outlet(0, new Uint8Array([0xb0 + this._.channel, data1, data2]));\r\n                    }\r\n                } catch (e) {\r\n                    this.error(e);\r\n                }\r\n            } else if (inlet >= 3) {\r\n                if (typeof data !== \"number\") {\r\n                    this.error(\"Input MIDI data is not number\");\r\n                    return;\r\n                }\r\n                const data1 = Math.round(Math.max(0, Math.min(127, data))); \r\n                if (inlet === 3) {\r\n                    this.outlet(0, new Uint8Array([0xc0 + this._.channel, data1]));\r\n                } else if (inlet === 4) {\r\n                    this.outlet(0, new Uint8Array([0xd0 + this._.channel, data1]));\r\n                } else if (inlet === 5) {\r\n                    const hires = this.getProp(\"hires\");\r\n                    if (hires === \"off\") {\r\n                        this.outlet(0, new Uint8Array([0xe0 + this._.channel, 0, data1]));\r\n                    } else if (hires === \"float\") {\r\n                        const data = ~~((Math.max(-1, Math.min(1, data1)) + 1) * 0.5 * 16383);\r\n                        this.outlet(0, new Uint8Array([0xe0 + this._.channel, data & 0x7f, data >> 7]));\r\n                    } else {\r\n                        const data = ~~Math.max(-8192, Math.min(8191, data1)) + 8192;\r\n                        this.outlet(0, new Uint8Array([0xe0 + this._.channel, data & 0x7f, data >> 7]));\r\n                    }\r\n                } else if (inlet === 6) {\r\n                    this._.channel = Math.min(15, data1 - 1);\r\n                }\r\n            }\r\n        })\r\n    }\r\n}\r\n","import type { IArgsMeta, IInletsMeta, IOutletsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\r\nimport { Bang, isBang } from \"../sdk\";\r\nimport MidiObject from \"./Base\";\r\n\r\ninterface IS {\r\n    midiAccess: WebMidi.MIDIAccess;\r\n    search: string;\r\n    port: WebMidi.MIDIInput;\r\n}\r\n\r\nexport default class midiIn extends MidiObject<{}, {}, [string | Bang], [Uint8Array, WebMidi.MIDIInput], [string]> {\r\n    static description = \"Get MIDI input from device name or ID\";\r\n    static inlets: IInletsMeta = [{\r\n        isHot: true,\r\n        type: \"anything\",\r\n        description: \"string to fetch device name or ID, bang to output MIDI port instance\"\r\n    }];\r\n    static outlets: IOutletsMeta = [{\r\n        type: \"object\",\r\n        description: \"MIDI message: Uint8Array\"\r\n    }, {\r\n        type: \"object\",\r\n        description: \"Instance: MIDIPort\"\r\n    }];\r\n    static args: IArgsMeta = [{\r\n        type: \"string\",\r\n        optional: false,\r\n        description: \"Device name or ID\"\r\n    }];\r\n    _: IS = { midiAccess: undefined as WebMidi.MIDIAccess, search: undefined as string, port: undefined as WebMidi.MIDIInput };\r\n    handleDeviceChange = async () => {\r\n        const { midiAccess } = this._;\r\n        if (!midiAccess) {\r\n            this.error(\"MIDIAccess not available.\");\r\n            return;\r\n        }\r\n        const devices: WebMidi.MIDIInput[] = [];\r\n        midiAccess.inputs.forEach(v => devices.push(v));\r\n        const enums = devices.map(d => d.name || d.id);\r\n        const { meta } = this;\r\n        meta.args[0] = { ...midiIn.args[0], type: \"enum\", enums };\r\n        this.setMeta(meta);\r\n    };\r\n    handleMIDIMessage = (e: WebMidi.MIDIMessageEvent) => this.outlet(0, e.data);\r\n    newSearch = async (search?: string) => {\r\n        this._.search = search;\r\n        const { midiAccess } = this._;\r\n        if (!midiAccess) {\r\n            this.error(\"MIDIAccess not available.\");\r\n            return;\r\n        }\r\n        const devices: WebMidi.MIDIInput[] = [];\r\n        midiAccess.inputs.forEach(v => devices.push(v));\r\n        for (let i = 0; i < devices.length; i++) {\r\n            const port = devices[i];\r\n            if (!search || port.id === search || port.name === search) {\r\n                if (port !== this._.port) {\r\n                    if (this._.port) this._.port.removeEventListener(\"midimessage\", this.handleMIDIMessage);\r\n                    this._.port = port;\r\n                    port.addEventListener(\"midimessage\", this.handleMIDIMessage);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    };\r\n    subscribe() {\r\n        super.subscribe();\r\n        this.on(\"preInit\", () => {\r\n            this.inlets = 1;\r\n            this.outlets = 2;\r\n        });\r\n        this.on(\"postInit\", async () => {\r\n            const search = this.args[0];\r\n            try {\r\n                const midiAccess = await navigator.requestMIDIAccess({ sysex: true });\r\n                this._.midiAccess = midiAccess;\r\n                midiAccess.addEventListener(\"statechange\", this.handleDeviceChange);\r\n                this.handleDeviceChange();\r\n                this.newSearch(search);\r\n            } catch (e) {\r\n                this.error(e);\r\n            }\r\n        });\r\n        this.on(\"updateArgs\", (args: [string?]) => {\r\n            this.newSearch(args[0]);\r\n        });\r\n        this.on(\"updateProps\", () => {\r\n            this.newSearch(this._.search);\r\n        });\r\n        this.on(\"inlet\", async ({ data, inlet }) => {\r\n            if (inlet === 0) {\r\n                if (!isBang(data)) {\r\n                    await this.newSearch(data);\r\n                }\r\n                if (this._.port) this.outlet(1, this._.port);\r\n            }\r\n        });\r\n        this.on(\"destroy\", () => {\r\n            if (this._.midiAccess) this._.midiAccess.removeEventListener(\"statechange\", this.handleDeviceChange);\r\n            if (this._.port) this._.port.removeEventListener(\"midimessage\", this.handleMIDIMessage);\r\n        });\r\n    }\r\n}\r\n","import type { IArgsMeta, IInletsMeta, IOutletsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\r\nimport { Bang, isBang } from \"../sdk\";\r\nimport MidiObject from \"./Base\";\r\n\r\ninterface IS {\r\n    midiAccess: WebMidi.MIDIAccess;\r\n    search: string;\r\n    port: WebMidi.MIDIOutput;\r\n    timestamp: number;\r\n}\r\n\r\nexport default class midiOut extends MidiObject<{}, IS, [Uint8Array | number[] | string | Bang, number], [WebMidi.MIDIOutput], [string]> {\r\n    static description = \"Get MIDI output from device name or ID\";\r\n    static inlets: IInletsMeta = [{\r\n        isHot: true,\r\n        type: \"anything\",\r\n        description: \"Uint8Array or number[] to output MIDI message, string to fetch device name or ID, bang to output MIDI port instance\"\r\n    }, {\r\n        isHot: false,\r\n        type: \"number\",\r\n        description: \"The time at which to begin sending the data to the port. 0 or past means immediate send.\"\r\n    }];\r\n    static outlets: IOutletsMeta = [{\r\n        type: \"object\",\r\n        description: \"Instance: MIDIPort\"\r\n    }];\r\n    static args: IArgsMeta = [{\r\n        type: \"string\",\r\n        optional: false,\r\n        description: \"Device name or ID\"\r\n    }];\r\n    _: IS = { midiAccess: undefined as WebMidi.MIDIAccess, search: undefined as string, port: undefined as WebMidi.MIDIOutput, timestamp: 0 };\r\n    handleDeviceChange = async () => {\r\n        const { midiAccess } = this._;\r\n        if (!midiAccess) {\r\n            this.error(\"MIDIAccess not available.\");\r\n            return;\r\n        }\r\n        const devices: WebMidi.MIDIOutput[] = [];\r\n        midiAccess.outputs.forEach(v => devices.push(v));\r\n        const enums = devices.map(d => d.name || d.id);\r\n        const { meta } = this;\r\n        meta.args[0] = { ...midiOut.args[0], type: \"enum\", enums };\r\n        this.setMeta(meta);\r\n    };\r\n    newSearch = async (search?: string) => {\r\n        this._.search = search;\r\n        const { midiAccess } = this._;\r\n        if (!midiAccess) {\r\n            this.error(\"MIDIAccess not available.\");\r\n            return;\r\n        }\r\n        const devices: WebMidi.MIDIOutput[] = [];\r\n        midiAccess.outputs.forEach(v => devices.push(v));\r\n        for (let i = 0; i < devices.length; i++) {\r\n            const port = devices[i];\r\n            if (!search || port.id === search || port.name === search) {\r\n                this._.port = port;\r\n                break;\r\n            }\r\n        }\r\n    };\r\n    subscribe() {\r\n        super.subscribe();\r\n        this.on(\"preInit\", () => {\r\n            this.inlets = 1;\r\n            this.outlets = 1;\r\n        });\r\n        this.on(\"postInit\", async () => {\r\n            const search = this.box.args[0];\r\n            try {\r\n                const midiAccess = await navigator.requestMIDIAccess({ sysex: true });\r\n                this._.midiAccess = midiAccess;\r\n                midiAccess.addEventListener(\"statechange\", this.handleDeviceChange);\r\n                this.handleDeviceChange();\r\n                this.newSearch(search);\r\n            } catch (e) {\r\n                this.error(e);\r\n            }\r\n        });\r\n        this.on(\"updateArgs\", (args: [string?]) => {\r\n            this.newSearch(args[0]);\r\n        });\r\n        this.on(\"updateProps\", () => {\r\n            this.newSearch(this._.search);\r\n        });\r\n        this.on(\"inlet\", async ({ data, inlet }) => {\r\n            if (inlet === 0) {\r\n                if (!isBang(data)) {\r\n                    if (typeof data === \"string\") {\r\n                        await this.newSearch(data);\r\n                    } else {\r\n                        if (this._.port) this._.port.send(data as Uint8Array | number[]);\r\n                        return;\r\n                    }\r\n                }\r\n                if (this._.port) this.outlet(0, this._.port);\r\n            } else if (inlet === 1) {\r\n                this._.timestamp = +data || 0 as number;\r\n            }\r\n        });\r\n        this.on(\"destroy\", () => {\r\n            if (this._.midiAccess) this._.midiAccess.removeEventListener(\"statechange\", this.handleDeviceChange);\r\n        });\r\n    }\r\n}\r\n","import type { IInletsMeta, IOutletsMeta, IPropsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\r\nimport MidiObject from \"./Base\";\r\n\r\ntype I = [Iterable<number>];\r\n\r\ntype O = [[number, number], [number, number], [number, number], number, number, number, number];\r\n\r\ninterface P {\r\n    hires: \"off\" | \"float\" | \"14bit\";\r\n}\r\n\r\nexport default class midiParse extends MidiObject<{}, {}, I, O, [string], P> {\r\n    static description = \"Interpret raw MIDI data\";\r\n    static inlets: IInletsMeta = [{\r\n        isHot: true,\r\n        type: \"anything\",\r\n        description: \"Raw MIDI message: Iterable<number>\"\r\n    }];\r\n    static outlets: IOutletsMeta = [{\r\n        type: \"object\",\r\n        description: \"Note-on and Note-off [pitch, velocity]: Uint8Array\"\r\n    }, {\r\n        type: \"object\",\r\n        description: \"Poly Key Pressure [key, value]: Uint8Array\"\r\n    }, {\r\n        type: \"object\",\r\n        description: \"Control Change [controller, value]: Uint8Array\"\r\n    }, {\r\n        type: \"number\",\r\n        description: \"Program Change\"\r\n    }, {\r\n        type: \"number\",\r\n        description: \"Aftertouch\"\r\n    }, {\r\n        type: \"number\",\r\n        description: \"Pitch Bend\"\r\n    }, {\r\n        type: \"number\",\r\n        description: \"MIDI Channel\"\r\n    }];\r\n    static props: IPropsMeta<P> = {\r\n        hires: {\r\n            type: \"enum\",\r\n            enums: [\"off\", \"float\", \"14bit\"],\r\n            default: \"off\",\r\n            description: \"High-resolution Pitch Bend (Off (0-127), Float (-1 to 1), 14-bit Fixed (-8192 to 8191))\"\r\n        }\r\n    };\r\n    subscribe() {\r\n        super.subscribe();\r\n        this.on(\"preInit\", () => {\r\n            this.inlets = 1;\r\n            this.outlets = 7;\r\n        })\r\n        this.on(\"inlet\", ({ data, inlet }) => {\r\n            if (inlet === 0) {\r\n                try {\r\n                    const [data0, data1, data2] = data;\r\n                    const eventType = data0 >> 4;\r\n                    const channel = data0 & 0x0f + 1;\r\n                    if (eventType === 0x08) {\r\n                        this.outlet(0, [data1, 0]);\r\n                    } else if (eventType === 0x09) {\r\n                        this.outlet(6, channel);\r\n                        this.outlet(0, [data1, data2]);\r\n                    } else if (eventType === 0x0a) {\r\n                        this.outlet(6, channel);\r\n                        this.outlet(1, [data1, data2]);\r\n                    } else if (eventType === 0x0b) {\r\n                        this.outlet(6, channel);\r\n                        this.outlet(2, [data1, data2]);\r\n                    } else if (eventType === 0x0c) {\r\n                        this.outlet(6, channel);\r\n                        this.outlet(3, data1);\r\n                    } else if (eventType === 0x0d) {\r\n                        this.outlet(6, channel);\r\n                        this.outlet(4, data1);\r\n                    } else if (eventType === 0x0e) {\r\n                        this.outlet(6, channel);\r\n                        const hires = this.getProp(\"hires\");\r\n                        if (hires === \"off\") this.outlet(5, data2);\r\n                        else if (hires === \"float\") this.outlet(5, (data1 + (data2 << 7)) / 16383 * 2 - 1)\r\n                        else this.outlet(5, -8192 + data1 + (data2 << 7));\r\n                    } else {\r\n                        this.error(`Unrecognised MIDI event type: ${eventType}`)\r\n                    }\r\n                } catch (e) {\r\n                    this.error(e);\r\n                }\r\n            }\r\n        })\r\n    }\r\n}\r\n","import type { IArgsMeta, IInletsMeta, IOutletsMeta, IPropsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\r\nimport { Bang } from \"../sdk\";\r\nimport MidiSequencerNode from \"../worklets/MidiSequencerNode\";\r\nimport MidiObject from \"./Base\";\r\n\r\ninterface IS {\r\n    node: MidiSequencerNode;\r\n}\r\ninterface P {\r\n    loop: boolean;\r\n    replaceOnEnd: boolean;\r\n}\r\n\r\nexport default class midiSequencer extends MidiObject<{}, IS, [ArrayBuffer | Uint8Array | { goto: number } | boolean | number], [Uint8Array, Bang], [], P> {\r\n    static description = \"MIDI File Player\";\r\n    static inlets: IInletsMeta = [{\r\n        isHot: true,\r\n        type: \"anything\",\r\n        description: \"ArrayBuffer as MIDI File, { goto: number } to jump, boolean/number to switch play/stop\"\r\n    }];\r\n    static outlets: IOutletsMeta = [{\r\n        type: \"object\",\r\n        description: \"realtime MIDI event\"\r\n    }, {\r\n        type: \"bang\",\r\n        description: \"Bang on End\"\r\n    }];\r\n    static args: IArgsMeta = [];\r\n    static props: IPropsMeta<P> = {\r\n        loop: {\r\n            type: \"boolean\",\r\n            description: \"Loop\",\r\n            default: false\r\n        },\r\n        replaceOnEnd: {\r\n            type: \"boolean\",\r\n            description: \"Replace MIDI file when current playing file ends\",\r\n            default: false\r\n        }\r\n    };\r\n    _: IS = { node: null };\r\n    subscribe() {\r\n        super.subscribe();\r\n        this.on(\"preInit\", () => {\r\n            this.inlets = 1;\r\n            this.outlets = 2;\r\n        });\r\n        this.on(\"postInit\", async () => {\r\n            await MidiSequencerNode.register(this.audioCtx);\r\n            const node = new MidiSequencerNode(this.audioCtx);\r\n            node.parameters.get(\"loop\").value = +!!this.getProp(\"loop\");\r\n            node.parameters.get(\"replaceOnEnd\").value = +!!this.getProp(\"replaceOnEnd\");\r\n            node.onMidi = bytes => this.outlet(0, bytes);\r\n            node.onEnd = () => this.outlet(1, new Bang());\r\n            this._.node = node;\r\n        });\r\n        this.on(\"updateProps\", () => {\r\n            this._.node.parameters.get(\"loop\").value = +!!this.getProp(\"loop\");\r\n            this._.node.parameters.get(\"replaceOnEnd\").value = +!!this.getProp(\"replaceOnEnd\");\r\n        });\r\n        this.on(\"inlet\", async ({ data, inlet }) => {\r\n            if (inlet === 0) {\r\n                if (typeof data === \"number\" || typeof data === \"boolean\") {\r\n                    this._.node.parameters.get(\"playing\").value = +!!data;\r\n                } else if (data instanceof ArrayBuffer) {\r\n                    this._.node.loadFile(data);\r\n                } else if (data instanceof Uint8Array) {\r\n                    this._.node.loadFile(data.buffer);\r\n                } else if (typeof data === \"object\") {\r\n                    if (typeof data.goto === \"number\") this._.node.goto(data.goto);\r\n                }\r\n            }\r\n        });\r\n        this.on(\"destroy\", () => {\r\n            this._.node.destroy();\r\n        });\r\n    }\r\n}\r\n","import * as JSON from \"../package.json\";\n\nexport default JSON;\n","import type { IJSPatcherSDK } from \"@jspatcher/jspatcher/src/core/SDK\";\r\n\r\nconst sdk = (globalThis as any).jspatcherEnv.sdk as IJSPatcherSDK;\r\nexport const {\r\n    React,\r\n    ReactDOM,\r\n    SemanticUI,\r\n    PatcherAudio,\r\n    OperableAudioBuffer,\r\n    Patcher,\r\n    Box,\r\n    Line,\r\n    BaseObject,\r\n    DefaultObject,\r\n    BaseUI,\r\n    DefaultUI,\r\n    CanvasUI,\r\n    CodeUI,\r\n    DefaultPopupUI,\r\n    CodePopupUI,\r\n    DOMUI,\r\n    generateDefaultObject,\r\n    generateRemoteObject,\r\n    generateRemotedObject,\r\n    Bang,\r\n    isBang,\r\n    TransmitterNode,\r\n    TemporalAnalyserNode,\r\n    SpectralAnalyserNode,\r\n    MathUtils,\r\n    BufferUtils,\r\n    Utils,\r\n    getReactMonacoEditor\r\n} = sdk;\r\n\r\nexport interface Bang extends InstanceType<typeof Bang> {}\r\nexport interface PatcherAudio extends InstanceType<typeof PatcherAudio> {}\r\nexport interface OperableAudioBuffer extends InstanceType<typeof OperableAudioBuffer> {}\r\nexport interface Patcher extends InstanceType<typeof Patcher> {}\r\nexport interface Box extends InstanceType<typeof Box> {}\r\nexport interface Line extends InstanceType<typeof Line> {}\r\nexport interface BaseObject extends InstanceType<typeof BaseObject> {}\r\nexport interface TransmitterNode extends InstanceType<typeof TransmitterNode> {}\r\nexport interface TemporalAnalyserNode extends InstanceType<typeof TemporalAnalyserNode> {}\r\nexport interface SpectralAnalyserNode extends InstanceType<typeof SpectralAnalyserNode> {}\r\n","// https://github.com/carter-thaxton/midi-file/blob/master/lib/midi-parser.js\n\n// data can be any array-like object.  It just needs to support .length, .slice, and an element getter []\n\nexport type MidiHeader = {\n    format: 0 | 1 | 2;\n    numTracks: number;\n    timeDivision: number;\n} & ({\n    framesPerSecond?: undefined;\n    ticksPerFrame?: undefined;\n    ticksPerBeat: number;\n} | {\n    framesPerSecond: number;\n    ticksPerFrame: number;\n    ticksPerBeat?: undefined;\n});\n\nexport interface MidiData {\n    header: MidiHeader;\n    tracks: MidiEvent[][];\n    duration: number;\n}\n\ntype MidiMetaEventType = \"sequenceNumber\" | \"text\" | \"copyrightNotice\" | \"trackName\" | \"instrumentName\" | \"lyrics\" | \"marker\" | \"cuePoint\" | \"channelPrefix\" | \"portPrefix\" | \"endOfTrack\" | \"setTempo\" | \"smpteOffset\" | \"timeSignature\" | \"keySignature\" | \"sequencerSpecific\" | \"unknownMeta\";\ntype MidiSysExEventType = \"sysEx\" | \"endSysEx\";\ntype MidiChannelEventType = \"noteOn\" | \"noteOff\" | \"noteAftertouch\" | \"controller\" | \"programChange\" | \"channelAftertouch\" | \"pitchBend\";\ntype MidiEventType = MidiMetaEventType | MidiSysExEventType | MidiChannelEventType;\n\nexport interface MidiBaseEvent<T extends MidiEventType> {\n    deltaTicks: number;\n    ticks: number;\n    time: number;\n    type: T;\n}\nexport interface MidiMetaEvent<T extends MidiMetaEventType> extends MidiBaseEvent<T> {\n    meta: true;\n}\nexport interface MidiChannelEvent<T extends MidiChannelEventType> extends MidiBaseEvent<T> {\n    running?: true;\n    channel: number;\n    time: number;\n    bytes: Uint8Array;\n}\nexport interface MidiSequenceNumberEvent extends MidiMetaEvent<\"sequenceNumber\"> {\n    type: \"sequenceNumber\";\n    number: number;\n}\nexport interface MidiTextEvent extends MidiMetaEvent<\"text\"> {\n    text: string;\n}\nexport interface MidiCopyrightNoticeEvent extends MidiMetaEvent<\"copyrightNotice\"> {\n    text: string;\n}\nexport interface MidiTrackNameEvent extends MidiMetaEvent<\"trackName\"> {\n    text: string;\n}\nexport interface MidiInstrumentNameEvent extends MidiMetaEvent<\"instrumentName\"> {\n    text: string;\n}\nexport interface MidiLyricsEvent extends MidiMetaEvent<\"lyrics\"> {\n    text: string;\n}\nexport interface MidiMarkerEvent extends MidiMetaEvent<\"marker\"> {\n    text: string;\n}\nexport interface MidiCuePointEvent extends MidiMetaEvent<\"cuePoint\"> {\n    text: string;\n}\nexport interface MidiChannelPrefixEvent extends MidiMetaEvent<\"channelPrefix\"> {\n    channel: number;\n}\nexport interface MidiPortPrefixEvent extends MidiMetaEvent<\"portPrefix\"> {\n    port: number;\n}\nexport interface MidiEndOfTrackEvent extends MidiMetaEvent<\"endOfTrack\"> {\n}\nexport interface MidiSetTempoEvent extends MidiMetaEvent<\"setTempo\"> {\n    microsecondsPerBeat: number;\n}\nexport interface MidiSmpteOffsetEvent extends MidiMetaEvent<\"smpteOffset\"> {\n    frameRate: number;\n    hour: number;\n    min: number;\n    sec: number;\n    frame: number;\n    subFrame: number;\n}\nexport interface MidiTimeSignatureEvent extends MidiMetaEvent<\"timeSignature\"> {\n    numerator: number;\n    denominator: number;\n    metronome: number;\n    thirtyseconds: number;\n}\nexport interface MidiKeySignatureEvent extends MidiMetaEvent<\"keySignature\"> {\n    key: number;\n    scale: number;\n}\nexport interface MidiSequencerSpecificEvent extends MidiMetaEvent<\"sequencerSpecific\"> {\n    data: number;\n}\nexport interface MidiUnknownMetaEvent extends MidiMetaEvent<\"unknownMeta\"> {\n    data: number;\n    metatypeByte: number;\n}\nexport interface MidiSysExEvent extends MidiBaseEvent<\"sysEx\"> {\n    bytes: Uint8Array;\n}\nexport interface MidiEndSysExEvent extends MidiBaseEvent<\"endSysEx\"> {\n    bytes: Uint8Array;\n}\nexport interface MidiNoteOffEvent extends MidiChannelEvent<\"noteOff\"> {\n    velocity: number;\n    byte9?: boolean;\n}\nexport interface MidiNoteOnEvent extends MidiChannelEvent<\"noteOn\"> {\n    velocity: number;\n}\nexport interface MidiNoteAftertouchEvent extends MidiChannelEvent<\"noteAftertouch\"> {\n    noteNumber: number;\n    amount: number;\n}\nexport interface MidiControllerEvent extends MidiChannelEvent<\"controller\"> {\n    controllerType: number;\n    value: number;\n}\nexport interface MidiProgramChangeEvent extends MidiChannelEvent<\"programChange\"> {\n    programNumber: number;\n}\nexport interface MidiChannelAftertouchEvent extends MidiChannelEvent<\"channelAftertouch\"> {\n    amount: number;\n}\nexport interface MidiPitchBendEvent extends MidiChannelEvent<\"pitchBend\"> {\n    value: number;\n}\n\nexport type MidiEvent =\n    | MidiSequenceNumberEvent\n    | MidiTextEvent\n    | MidiCopyrightNoticeEvent\n    | MidiTrackNameEvent\n    | MidiInstrumentNameEvent\n    | MidiLyricsEvent\n    | MidiMarkerEvent\n    | MidiCuePointEvent\n    | MidiChannelPrefixEvent\n    | MidiPortPrefixEvent\n    | MidiEndOfTrackEvent\n    | MidiSetTempoEvent\n    | MidiSmpteOffsetEvent\n    | MidiTimeSignatureEvent\n    | MidiKeySignatureEvent\n    | MidiSequencerSpecificEvent\n    | MidiUnknownMetaEvent\n    | MidiSysExEvent\n    | MidiEndSysExEvent\n    | MidiControllerEvent\n    | MidiProgramChangeEvent\n    | MidiChannelAftertouchEvent\n    | MidiPitchBendEvent\n    | MidiNoteAftertouchEvent\n    | MidiNoteOnEvent\n    | MidiNoteOffEvent;\n\nclass Parser {\n    bufferLen: number;\n    buffer: DataView;\n    pos: number;\n    constructor(data: ArrayBuffer) {\n        this.buffer = new DataView(data);\n        this.bufferLen = this.buffer.byteLength;\n        this.pos = 0;\n    }\n    eof() {\n        return this.pos >= this.bufferLen;\n    }\n    readUInt8() {\n        const result = this.buffer.getUint8(this.pos);\n        this.pos += 1;\n        return result;\n    }\n    readInt8() {\n        const result = this.buffer.getInt8(this.pos);\n        this.pos += 1;\n        return result;\n    }\n    readUInt16() {\n        const result = this.buffer.getUint16(this.pos);\n        this.pos += 2;\n        return result;\n    }\n    readInt16() {\n        const result = this.buffer.getInt16(this.pos);\n        this.pos += 2;\n        return result;\n    }\n    readUInt24() {\n        const b0 = this.readUInt8();\n        const b1 = this.readUInt8();\n        const b2 = this.readUInt8();\n    \n        return (b0 << 16) + (b1 << 8) + b2;\n    }\n    readInt24() {\n        const u = this.readUInt24()\n        if (u & 0x800000) return u - 0x1000000;\n        else return u;\n    }\n    readUInt32() {\n        const result = this.buffer.getUint32(this.pos);\n        this.pos += 4;\n        return result;\n    }\n    readInt32() {\n        const result = this.buffer.getInt32(this.pos);\n        this.pos += 4;\n        return result;\n    }\n    readBytes(len: number) {\n        const bytes = this.buffer.buffer.slice(this.pos, this.pos + len);\n        this.pos += len;\n        return bytes;\n    }\n    readString(len: number) {\n        const bytes = this.readBytes(len);\n        return String.fromCharCode.apply(null, new Uint8Array(bytes));\n    }\n    readVarInt() {\n        let result = 0;\n        while (!this.eof()) {\n            const b = this.readUInt8();\n            if (b & 0x80) {\n                result += (b & 0x7f);\n                result <<= 7;\n            } else {\n                // b is last byte\n                return result + b;\n            }\n        }\n        // premature eof\n        return result;\n    }\n    readChunk() {\n        const id = this.readString(4);\n        const length = this.readUInt32();\n        const data = this.readBytes(length);\n        return { id, length, data };\n    }\n}\n\nconst parseMidi = (data: ArrayBuffer): MidiData => {\n    const p = new Parser(data);\n\n    const headerChunk = p.readChunk();\n    if (headerChunk.id != \"MThd\")\n        throw new Error(`Bad MIDI file.  Expected \"MHdr\", got: \"${headerChunk.id}\"`);\n    const header = parseHeader(headerChunk.data);\n\n    const tracks = [];\n    let duration = 0;\n    for (let i = 0; !p.eof() && i < header.numTracks; i++) {\n        const trackChunk = p.readChunk();\n        if (trackChunk.id != \"MTrk\")\n            throw new Error(`Bad MIDI file.  Expected \"MTrk\", got: \"${trackChunk.id}\"`);\n        const track = parseTrack(trackChunk.data, header.ticksPerBeat);\n        tracks.push(track);\n        const lastEvent = track[track.length - 1] as MidiChannelEvent<any>;\n        if (\"time\" in lastEvent && lastEvent.time > duration) duration = lastEvent.time;\n    }\n    return { header, tracks, duration };\n}\n\nconst parseHeader = (data: ArrayBuffer): MidiHeader => {\n    const p = new Parser(data);\n\n    const format = p.readUInt16() as 0 | 1 | 2;\n    const numTracks = p.readUInt16();\n\n    const timeDivision = p.readUInt16();\n    if (timeDivision & 0x8000) {\n        const framesPerSecond = 0x100 - (timeDivision >> 8);\n        const ticksPerFrame = timeDivision & 0xFF;\n        return { format, numTracks, timeDivision, framesPerSecond, ticksPerFrame };\n    } else {\n        const ticksPerBeat = timeDivision;\n        return { format, numTracks, timeDivision, ticksPerBeat };\n    }\n}\n\nconst parseTrack = (data: ArrayBuffer, ppq = 480) => {\n    const p = new Parser(data);\n\n    let lastEventTypeByte: number = null;\n\n    let ticks = 0;\n    let bpm = 120;\n    let tempoTicks = 0;\n    let tempoTime = 0;\n\n    const readEvent = (): MidiEvent => {\n        const deltaTicks = p.readVarInt();\n        ticks += deltaTicks;\n        const elapsedBeats = (ticks - tempoTicks) / ppq;\n        const time = tempoTime + (60 / bpm) * elapsedBeats;\n\n        let eventTypeByte = p.readUInt8();\n\n        const event: any = { ticks, deltaTicks, time };\n\n        if ((eventTypeByte & 0xf0) === 0xf0) {\n            // system / meta event\n            if (eventTypeByte === 0xff) {\n                // meta event\n                event.meta = true;\n                const metatypeByte = p.readUInt8();\n                const length = p.readVarInt();\n                if (metatypeByte === 0x00) {\n                    event.type = \"sequenceNumber\";\n                    if (length !== 2) throw `Expected length for sequenceNumber event is 2, got ${length}`;\n                    event.number = p.readUInt16();\n                } else if (metatypeByte === 0x01) {\n                    event.type = \"text\";\n                    event.text = p.readString(length);\n                } else if (metatypeByte === 0x02) {\n                    event.type = \"copyrightNotice\";\n                    event.text = p.readString(length);\n                } else if (metatypeByte === 0x03) {\n                    event.type = \"trackName\";\n                    event.text = p.readString(length);\n                } else if (metatypeByte === 0x04) {\n                    event.type = \"instrumentName\";\n                    event.text = p.readString(length);\n                } else if (metatypeByte === 0x05) {\n                    event.type = \"lyrics\";\n                    event.text = p.readString(length);\n                } else if (metatypeByte === 0x06) {\n                    event.type = \"marker\";\n                    event.text = p.readString(length);\n                } else if (metatypeByte === 0x07) {\n                    event.type = \"cuePoint\";\n                    event.text = p.readString(length);\n                } else if (metatypeByte === 0x20) {\n                    event.type = \"channelPrefix\";\n                    if (length != 1) throw new Error(`Expected length for channelPrefix event is 1, got ${length}`);\n                    event.channel = p.readUInt8();\n                } else if (metatypeByte === 0x21) {\n                    event.type = \"portPrefix\";\n                    if (length != 1) throw new Error(`Expected length for portPrefix event is 1, got ${length}`);\n                    event.port = p.readUInt8();\n                } else if (metatypeByte === 0x2f) {\n                    event.type = \"endOfTrack\";\n                    if (length != 0) throw new Error(`Expected length for endOfTrack event is 0, got ${length}`);\n                } else if (metatypeByte === 0x51) {\n                    event.type = \"setTempo\";\n                    if (length != 3) throw new Error(`Expected length for setTempo event is 3, got ${length}`);\n                    const microsecondsPerBeat = p.readUInt24();\n                    event.microsecondsPerBeat = microsecondsPerBeat;\n                    bpm = 60000000 / event.microsecondsPerBeat;\n                    tempoTicks = ticks;\n                    tempoTime = time;\n                } else if (metatypeByte === 0x54) {\n                    event.type = \"smpteOffset\";\n                    if (length != 5) throw new Error(`Expected length for smpteOffset event is 5, got ${length}`);\n                    const hourByte = p.readUInt8();\n                    const FRAME_RATES: Record<number, number> = { 0x00: 24, 0x20: 25, 0x40: 29, 0x60: 30 };\n                    event.frameRate = FRAME_RATES[hourByte & 0x60];\n                    event.hour = hourByte & 0x1f;\n                    event.min = p.readUInt8();\n                    event.sec = p.readUInt8();\n                    event.frame = p.readUInt8();\n                    event.subFrame = p.readUInt8();\n                } else if (metatypeByte === 0x58) {\n                    event.type = \"timeSignature\";\n                    if (length != 4) throw new Error(`Expected length for timeSignature event is 4, got ${length}`);\n                    event.numerator = p.readUInt8();\n                    event.denominator = (1 << p.readUInt8());\n                    event.metronome = p.readUInt8();\n                    event.thirtyseconds = p.readUInt8();\n                } else if (metatypeByte === 0x59) {\n                    event.type = \"keySignature\";\n                    if (length != 2) throw new Error(`Expected length for keySignature event is 2, got ${length}`);\n                    event.key = p.readInt8();\n                    event.scale = p.readUInt8();\n                } else if (metatypeByte === 0x7f) {\n                    event.type = \"sequencerSpecific\";\n                    event.data = p.readBytes(length);\n                } else {\n                    event.type = \"unknownMeta\";\n                    event.data = p.readBytes(length);\n                    event.metatypeByte = metatypeByte;\n                }\n            } else if (eventTypeByte == 0xf0) {\n                event.type = \"sysEx\";\n                const length = p.readVarInt();\n                const data = p.readBytes(length);\n                event.bytes = new Uint8Array([eventTypeByte, ...new Uint8Array(data)]);\n            } else if (eventTypeByte == 0xf7) {\n                event.type = \"endSysEx\";\n                const length = p.readVarInt();\n                const data = p.readBytes(length);\n                event.bytes = new Uint8Array([eventTypeByte, ...new Uint8Array(data)]);\n            } else {\n                throw new Error(`Unrecognised MIDI event type byte: ${eventTypeByte}`);\n            }\n        } else {\n            // channel event\n            let param1: number;\n            if ((eventTypeByte & 0x80) === 0) {\n                // running status - reuse lastEventTypeByte as the event type.\n                // eventTypeByte is actually the first parameter\n                if (lastEventTypeByte === null) throw new Error(\"Running status byte encountered before status byte\");\n                param1 = eventTypeByte;\n                eventTypeByte = lastEventTypeByte;\n                event.running = true;\n            } else {\n                param1 = p.readUInt8();\n                lastEventTypeByte = eventTypeByte;\n            }\n            const eventType = eventTypeByte >> 4;\n            event.channel = eventTypeByte & 0x0f;\n            if (eventType === 0x08) {\n                event.type = \"noteOff\";\n                event.noteNumber = param1;\n                const param2 = p.readUInt8();\n                event.velocity = param2;\n                event.bytes = new Uint8Array([eventTypeByte, param1, param2]);\n            } else if (eventType === 0x09) {\n                const velocity = p.readUInt8();\n                event.type = velocity === 0 ? \"noteOff\" : \"noteOn\";\n                event.noteNumber = param1;\n                event.velocity = velocity;\n                if (velocity === 0) event.byte9 = true;\n                event.bytes = new Uint8Array([eventTypeByte, param1, velocity]);\n            } else if (eventType === 0x0a) {\n                event.type = \"noteAftertouch\";\n                event.noteNumber = param1;\n                const param2 = p.readUInt8();\n                event.amount = param2;\n                event.bytes = new Uint8Array([eventTypeByte, param1, param2]);\n            } else if (eventType === 0x0b) {\n                event.type = \"controller\";\n                event.controllerType = param1;\n                const param2 = p.readUInt8();\n                event.value = param2;\n                event.bytes = new Uint8Array([eventTypeByte, param1, param2]);\n            } else if (eventType === 0x0c) {\n                event.type = \"programChange\";\n                event.programNumber = param1;\n                event.bytes = new Uint8Array([eventTypeByte, param1]);\n            } else if (eventType === 0x0d) {\n                event.type = \"channelAftertouch\";\n                event.amount = param1;\n                event.bytes = new Uint8Array([eventTypeByte, param1]);\n            } else if (eventType === 0x0e) {\n                event.type = \"pitchBend\";\n                const param2 = p.readUInt8();\n                event.value = (param1 + (param2 << 7)) - 0x2000;\n                event.bytes = new Uint8Array([eventTypeByte, param1, param2]);\n            } else {\n                throw new Error(`Unrecognised MIDI event type: ${eventType}`);\n            }\n        }\n        return event;\n    }\n    const events = [];\n    while (!p.eof()) {\n        const event = readEvent();\n        events.push(event);\n    }\n    return events;\n}\n\nexport default parseMidi;\n","import processorUrl from \"./MidiSequencerProcessor.worklet.ts\";\r\nimport type { MsgIn as MsgOut, MsgOut as MsgIn, Parameters } from \"./MidiSequencer.types\";\r\nimport type { TypedAudioWorkletNode } from \"@jspatcher/jspatcher/src/core/worklets/TypedAudioWorklet\";\r\nimport parseMidi from \"./MidiParser\";\r\n\r\nexport const processorId = \"__JSPatcher_package-midi_MidiSequencer\";\r\n\r\nexport const AudioWorkletNode = globalThis.AudioWorkletNode as typeof TypedAudioWorkletNode;\r\n\r\nexport default class MidiSequencerNode extends AudioWorkletNode<MsgIn, MsgOut, Parameters> {\r\n    static register(context: BaseAudioContext) {\r\n        return context.audioWorklet.addModule(processorUrl);\r\n    }\r\n    handleMessage: (e: MessageEvent<MsgIn>) => void;\r\n    onMidi: (bytes: Uint8Array, time: number) => any;\r\n    onEnd: () => any;\r\n    timeOffset: number;\r\n    totalDuration: number;\r\n    constructor(context: BaseAudioContext) {\r\n        super(context, processorId, { numberOfInputs: 0, numberOfOutputs: 1 });\r\n        this.timeOffset = 0;\r\n        this.totalDuration = 0;\r\n        this.handleMessage = (e: MessageEvent<MsgIn>) => {\r\n            if (e.data.type === \"midiMessage\") {\r\n                this.onMidi?.(e.data.data.bytes, e.data.data.time);\r\n            } else if (e.data.type === \"timeOffset\") {\r\n                this.timeOffset = e.data.data;\r\n            } else if (e.data.type === \"end\") {\r\n                this.onEnd?.();\r\n            }\r\n        };\r\n        this.port.onmessage = this.handleMessage;\r\n    }\r\n    loadFile(file: ArrayBuffer) {\r\n        const data = parseMidi(file);\r\n        this.totalDuration = data.duration;\r\n        this.port.postMessage({ type: \"midiJson\", data });\r\n    }\r\n    goto(time: number) {\r\n        this.port.postMessage({ type: \"goto\", data: time });\r\n    }\r\n    sendFlush() {\r\n        this.onMidi?.(new Uint8Array([176, 121, 0]), this.context.currentTime); // All Controllers Reset\r\n        this.onMidi?.(new Uint8Array([176, 123, 0]), this.context.currentTime); // All Notes Off\r\n    }\r\n\tdestroy() {\r\n        this.sendFlush();\r\n\t}\r\n}\r\n","module.exports = require(\"!!D:\\\\p\\\\@jspatcher\\\\package-midi\\\\node_modules\\\\worklet-loader\\\\dist\\\\worklets\\\\InlineWorklet.js\")(\"/******/ (() => { // webpackBootstrap\\n/******/ \\t\\\"use strict\\\";\\n/******/ \\t// The require scope\\n/******/ \\tvar __webpack_require__ = {};\\n/******/ \\t\\n/************************************************************************/\\n/******/ \\t/* webpack/runtime/define property getters */\\n/******/ \\t(() => {\\n/******/ \\t\\t// define getter functions for harmony exports\\n/******/ \\t\\t__webpack_require__.d = (exports, definition) => {\\n/******/ \\t\\t\\tfor(var key in definition) {\\n/******/ \\t\\t\\t\\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\\n/******/ \\t\\t\\t\\t\\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\\n/******/ \\t\\t\\t\\t}\\n/******/ \\t\\t\\t}\\n/******/ \\t\\t};\\n/******/ \\t})();\\n/******/ \\t\\n/******/ \\t/* webpack/runtime/hasOwnProperty shorthand */\\n/******/ \\t(() => {\\n/******/ \\t\\t__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))\\n/******/ \\t})();\\n/******/ \\t\\n/******/ \\t/* webpack/runtime/make namespace object */\\n/******/ \\t(() => {\\n/******/ \\t\\t// define __esModule on exports\\n/******/ \\t\\t__webpack_require__.r = (exports) => {\\n/******/ \\t\\t\\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\\n/******/ \\t\\t\\t\\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\\n/******/ \\t\\t\\t}\\n/******/ \\t\\t\\tObject.defineProperty(exports, '__esModule', { value: true });\\n/******/ \\t\\t};\\n/******/ \\t})();\\n/******/ \\t\\n/************************************************************************/\\nvar __webpack_exports__ = {};\\n/*!*****************************************************************************************************************************!*\\\\\\n  !*** ./node_modules/esbuild-loader/dist/index.js??ruleSet[1].rules[1].use!./src/worklets/MidiSequencerProcessor.worklet.ts ***!\\n  \\\\*****************************************************************************************************************************/\\n__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\\"processorId\\\": () => (/* binding */ processorId)\\n/* harmony export */ });\\nconst processorId = \\\"__JSPatcher_package-midi_MidiSequencer\\\";\\nconst audioWorkletGlobalScope = globalThis;\\nconst { registerProcessor, sampleRate } = audioWorkletGlobalScope;\\nconst AudioWorkletProcessor = audioWorkletGlobalScope.AudioWorkletProcessor;\\nclass MidiSequencerProcessor extends AudioWorkletProcessor {\\n  constructor(options) {\\n    super(options);\\n    this.playing = false;\\n    this.loop = false;\\n    this.replaceOnEnd = false;\\n    this.toReplaceOnEnd = null;\\n    this.data = null;\\n    this.orderedEvents = [];\\n    this.$event = 0;\\n    this.timeOffset = 0;\\n    this.totalDuration = 0;\\n    this.handleMessage = (e) => {\\n      if (e.data.type === \\\"midiJson\\\") {\\n        this.setData(e.data.data);\\n      } else if (e.data.type === \\\"goto\\\") {\\n        this.goto(e.data.data);\\n      }\\n    };\\n    this.port.onmessage = this.handleMessage;\\n  }\\n  static get parameterDescriptors() {\\n    return [{\\n      name: \\\"playing\\\",\\n      minValue: 0,\\n      maxValue: 1,\\n      defaultValue: 0\\n    }, {\\n      name: \\\"loop\\\",\\n      minValue: 0,\\n      maxValue: 1,\\n      defaultValue: 0\\n    }, {\\n      name: \\\"replaceOnEnd\\\",\\n      minValue: 0,\\n      maxValue: 1,\\n      defaultValue: 0\\n    }];\\n  }\\n  _setData(data) {\\n    this.sendFlush();\\n    this.data = data;\\n    this.orderedEvents = [];\\n    this.$event = 0;\\n    this.timeOffset = 0;\\n    this.totalDuration = data.duration;\\n    data.tracks.forEach((track) => {\\n      track.forEach((event) => {\\n        if (event.bytes) {\\n          this.orderedEvents.push({ time: event.time, data: event.bytes });\\n        }\\n      });\\n    });\\n    this.orderedEvents.sort((a, b) => a.time - b.time);\\n  }\\n  setData(data) {\\n    if (this.replaceOnEnd) {\\n      this.toReplaceOnEnd = data;\\n    } else {\\n      this._setData(data);\\n    }\\n  }\\n  goto(time) {\\n    this.sendFlush();\\n    let $ = 0;\\n    this.timeOffset = Math.min(time, this.totalDuration);\\n    for (let i = 0; i < this.orderedEvents.length; i++) {\\n      const event = this.orderedEvents[i];\\n      if (event.time < this.timeOffset)\\n        $ = i;\\n      else\\n        break;\\n    }\\n    this.$event = $;\\n  }\\n  onMidi(data, time) {\\n    this.port.postMessage({ type: \\\"midiMessage\\\", data: { bytes: data, time } });\\n  }\\n  sendFlush() {\\n    const { currentTime } = audioWorkletGlobalScope;\\n    this.onMidi(new Uint8Array([176, 121, 0]), currentTime);\\n    this.onMidi(new Uint8Array([176, 123, 0]), currentTime);\\n  }\\n  advance(offset, playing, loop, fromTime) {\\n    if (!playing)\\n      return;\\n    if (this.timeOffset >= this.totalDuration) {\\n      if (this.toReplaceOnEnd && this.replaceOnEnd) {\\n        this._setData(this.toReplaceOnEnd);\\n        this.toReplaceOnEnd = null;\\n      }\\n      if (loop) {\\n        this.timeOffset = 0;\\n        this.$event = 0;\\n      } else\\n        return;\\n    }\\n    if (!this.orderedEvents.length)\\n      return;\\n    let advanced = 0;\\n    while (advanced < offset) {\\n      let $ = this.$event + 1;\\n      let nextEventDeltaTime = 0;\\n      let nextEvent = null;\\n      const timeOffset = this.timeOffset + advanced;\\n      if ($ >= this.orderedEvents.length) {\\n        nextEventDeltaTime += this.totalDuration - timeOffset;\\n        if (loop) {\\n          $ = 0;\\n          nextEvent = this.orderedEvents[$];\\n          const { time } = nextEvent;\\n          this.timeOffset -= this.totalDuration;\\n          nextEventDeltaTime += time;\\n        }\\n      } else {\\n        nextEvent = this.orderedEvents[$];\\n        const { time } = nextEvent;\\n        nextEventDeltaTime += time - timeOffset;\\n      }\\n      if (advanced + nextEventDeltaTime < offset) {\\n        if (nextEvent) {\\n          const { data } = nextEvent;\\n          this.onMidi(data, fromTime + advanced);\\n        } else\\n          break;\\n        this.$event = $;\\n      }\\n      advanced += nextEventDeltaTime;\\n    }\\n    this.timeOffset += offset;\\n    if (this.timeOffset >= this.totalDuration) {\\n      this.port.postMessage({ type: \\\"end\\\" });\\n    }\\n    if (loop) {\\n      this.timeOffset %= this.totalDuration;\\n    } else if (this.timeOffset > this.totalDuration) {\\n      this.timeOffset = this.totalDuration;\\n    }\\n  }\\n  updateTime() {\\n    this.port.postMessage({ type: \\\"timeOffset\\\", data: this.timeOffset });\\n  }\\n  process(inputs, outputs, parameters) {\\n    const bufferSize = outputs[0][0].length;\\n    const advanceTime = 1 / sampleRate;\\n    const { currentTime } = audioWorkletGlobalScope;\\n    for (let i = 0; i < bufferSize; i++) {\\n      const fromTime = currentTime * advanceTime * i;\\n      const playing = !!(i < parameters.playing.length ? parameters.playing[i] : parameters.playing[0]);\\n      if (playing !== this.playing && !playing)\\n        this.onMidi(new Uint8Array([176, 123, 0]), fromTime);\\n      this.playing = playing;\\n      const loop = !!(i < parameters.loop.length ? parameters.loop[i] : parameters.loop[0]);\\n      this.loop = loop;\\n      const replaceOnEnd = !!(i < parameters.replaceOnEnd.length ? parameters.replaceOnEnd[i] : parameters.replaceOnEnd[0]);\\n      if (replaceOnEnd !== this.replaceOnEnd && !replaceOnEnd)\\n        this.toReplaceOnEnd = null;\\n      this.replaceOnEnd = replaceOnEnd;\\n      this.advance(advanceTime, this.playing, this.loop, fromTime);\\n    }\\n    this.updateTime();\\n    return true;\\n  }\\n}\\ntry {\\n  registerProcessor(processorId, MidiSequencerProcessor);\\n} catch (error) {\\n  console.warn(error);\\n}\\n\\n/******/ })()\\n;\\n//# sourceMappingURL=69eb0d0bf1b17bf18de8.worklet.js.map\");","\"use strict\";\n\n// http://stackoverflow.com/questions/10343913/how-to-create-a-web-worker-from-a-string\nvar URL = window.URL || window.webkitURL;\n\nmodule.exports = function (content) {\n  try {\n    var blob;\n\n    try {\n      // BlobBuilder = Deprecated, but widely implemented\n      var BlobBuilder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder;\n      blob = new BlobBuilder();\n      blob.append(content);\n      blob = blob.getBlob('application/javascript; charset=utf-8');\n    } catch (e) {\n      // The proposed API\n      blob = new Blob([content], {\n        type: 'application/javascript; charset=utf-8'\n      });\n    }\n\n    return URL.createObjectURL(blob);\n  } catch (e) {\n    return 'data:application/javascript,' + encodeURIComponent(content);\n  }\n};","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n\t}\n\tdef['default'] = () => (value);\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import midiDevices from \"./objects/devices\";\nimport midiFormat from \"./objects/midiFormat\";\nimport midiIn from \"./objects/midiIn\";\nimport midiOut from \"./objects/midiOut\";\nimport midiParse from \"./objects/midiParse\";\nimport midiSequencer from \"./objects/midiSequencer\";\nimport makeNote from \"./objects/makeNote\";\n\nexport default async () => {\n    return {\n        midiDevices,\n        midiIn,\n        midiin: midiIn,\n        midiOut,\n        midiout: midiOut,\n        midiFormat,\n        midiformat: midiFormat,\n        midiParse,\n        midiparse: midiParse,\n        midiSequencer,\n        midisequencer: midiSequencer,\n        makenote: makeNote,\n        makeNote\n    };\n};"],"names":[],"sourceRoot":""}