{"version":3,"file":"index.jspatpkg.js","mappings":"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","sources":["webpack://@jspatcher/package-midi/./src/index.ts","webpack://@jspatcher/package-midi/./src/objects/Base.ts","webpack://@jspatcher/package-midi/./src/objects/devices.ts","webpack://@jspatcher/package-midi/./src/objects/midiFormat.ts","webpack://@jspatcher/package-midi/./src/objects/midiIn.ts","webpack://@jspatcher/package-midi/./src/objects/midiOut.ts","webpack://@jspatcher/package-midi/./src/objects/midiparse.ts","webpack://@jspatcher/package-midi/./src/package-info.ts","webpack://@jspatcher/package-midi/./src/sdk.ts","webpack://@jspatcher/package-midi/webpack/bootstrap","webpack://@jspatcher/package-midi/webpack/runtime/create fake namespace object","webpack://@jspatcher/package-midi/webpack/runtime/define property getters","webpack://@jspatcher/package-midi/webpack/runtime/hasOwnProperty shorthand","webpack://@jspatcher/package-midi/webpack/runtime/make namespace object","webpack://@jspatcher/package-midi/./src/index.jspatpkg.ts"],"sourcesContent":["import packageInfo from \"./package-info\";\r\nimport type { IExternalPackage } from \"@jspatcher/jspatcher/src/core/GlobalPackageManager\";\r\n\r\nexport const name = packageInfo.name.split(\"/\").pop().replace(/^package-/, '');\r\n\r\nexport const { author, license, keywords, version, description, jspatcher } = packageInfo;\r\n\r\nexport default { name, author, license, keywords, version, description, ...jspatcher } as IExternalPackage;","import { author, name, version, description } from \"../index\";\r\nimport { DefaultObject } from \"../sdk\";\r\n\r\nexport default class MidiObject<\r\n    D = {},\r\n    S = {},\r\n    I extends any[] = any[],\r\n    O extends any[] = any[],\r\n    A extends any[] = any[],\r\n    P = {},\r\n    U = {},\r\n    E = {}\r\n> extends DefaultObject<D, S, I, O, A, P, U, E> {\r\n    static package = name;\r\n    static author = author;\r\n    static version = version;\r\n    static description = description;\r\n}\r\n","import type { IArgsMeta, IInletsMeta, IOutletsMeta, IPropsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\nimport type { StrictDropdownItemProps } from \"semantic-ui-react\";\nimport { Bang, isBang } from \"../sdk\";\nimport MidiObject from \"./Base\";\n\ninterface IS {\n    midiAccess: WebMidi.MIDIAccess;\n}\ninterface P {\n    autoUpdate: boolean;\n}\n\nexport default class midiDevices extends MidiObject<{}, {}, [Bang | WebMidi.MIDIPortType[]], [WebMidi.MIDIPort[], StrictDropdownItemProps[]], WebMidi.MIDIPortType[], P> {\n    static description = \"Enumerate MIDI devices\";\n    static inlets: IInletsMeta = [{\n        isHot: true,\n        type: \"object\",\n        description: \"Bang to enumerate, MIDIPortType[] to use a filter\"\n    }];\n    static outlets: IOutletsMeta = [{\n        type: \"object\",\n        description: \"Array of MIDIPort\"\n    }, {\n        type: \"object\",\n        description: \"Array of DropdownItemProps\"\n    }];\n    static args: IArgsMeta = [{\n        type: \"enum\",\n        varLength: true,\n        optional: true,\n        enums: [\"input\", \"output\"],\n        default: [\"input\", \"output\"],\n        description: \"Output only kinds of devices\"\n    }];\n    static props: IPropsMeta<P> = {\n        autoUpdate: {\n            type: \"boolean\",\n            default: true,\n            description: \"Auto output devices when devices change\"\n        }\n    };\n    _ = { midiAccess: undefined as WebMidi.MIDIAccess };\n    handleDeviceChange = async () => {\n        if (!this.getProp(\"autoUpdate\")) return;\n        const filters = this.args.slice();\n        if (!filters.length) filters.push(\"input\", \"output\");\n        const { midiAccess } = this._;\n        if (!midiAccess) {\n            this.error(\"MIDIAccess not available.\");\n            return;\n        }\n        const devices: WebMidi.MIDIPort[] = [];\n        if (filters.indexOf(\"input\") !== -1) midiAccess.inputs.forEach(v => devices.push(v));\n        if (filters.indexOf(\"output\") !== -1) midiAccess.outputs.forEach(v => devices.push(v));\n        const options = devices.map((d, key) => {\n            const { type, name, id } = d;\n            return { key, icon: { input: \"sign-in\", output: \"sign-out\" }[type], text: name || id, value: id };\n        });\n        this.outletAll([devices, options]);\n    };\n    subscribe() {\n        super.subscribe();\n        this.on(\"preInit\", () => {\n            this.inlets = 1;\n            this.outlets = 2;\n        });\n        this.on(\"postInit\", async () => {\n            try {\n                const midiAccess = await navigator.requestMIDIAccess({ sysex: true });\n                this._.midiAccess = midiAccess;\n                midiAccess.addEventListener(\"statechange\", this.handleDeviceChange);\n                if (this.getProp(\"autoUpdate\")) this.handleDeviceChange();\n            } catch (e) {\n                this.error(e);\n            }\n        });\n        this.on(\"inlet\", async ({ data, inlet }) => {\n            if (inlet === 0) {\n                let filters: WebMidi.MIDIPortType[];\n                if (isBang(data)) {\n                    filters = this.args.slice();\n                    if (!filters.length) filters.push(\"input\", \"output\");\n                } else {\n                    filters = data.slice();\n                }\n                const { midiAccess } = this._;\n                if (!midiAccess) {\n                    this.error(\"MIDIAccess not available.\");\n                    return;\n                }\n                const devices: WebMidi.MIDIPort[] = [];\n                if (filters.indexOf(\"input\") !== -1) midiAccess.inputs.forEach(v => devices.push(v));\n                if (filters.indexOf(\"output\") !== -1) midiAccess.outputs.forEach(v => devices.push(v));\n                const options = devices.map((d, key) => {\n                    const { type, name, id } = d;\n                    return { key, icon: { input: \"sign-in\", output: \"sign-out\" }[type], text: name || id, value: id };\n                });\n                this.outletAll([devices, options]);\n            }\n        });\n        this.on(\"destroy\", () => {\n            if (this._.midiAccess) this._.midiAccess.removeEventListener(\"statechange\", this.handleDeviceChange);\n        });\n    }\n}\n","import type { IInletsMeta, IOutletsMeta, IPropsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\r\nimport MidiObject from \"./Base\";\r\n\r\ninterface IS {\r\n    channel: number;\r\n}\r\n\r\ntype I = [Iterable<number>, Iterable<number>, Iterable<number>, number, number, number, number];\r\n\r\ntype O = [Uint8Array];\r\n\r\ninterface P {\r\n    hires: \"off\" | \"float\" | \"14bit\";\r\n}\r\n\r\nexport default class midiFormat extends MidiObject<{}, {}, I, O, [string], P> {\r\n    static description = \"Prepare data in the form of a MIDI message\";\r\n    static outlets: IOutletsMeta = [{\r\n        type: \"object\",\r\n        description: \"Raw MIDI message: Uint8Array\"\r\n    }];\r\n    static inlets: IInletsMeta = [{\r\n        isHot: true,\r\n        type: \"object\",\r\n        description: \"Note-on and Note-off [pitch, velocity]: Iterable<number>\"\r\n    }, {\r\n        isHot: true,\r\n        type: \"object\",\r\n        description: \"Poly Key Pressure [key, value]: Iterable<number>\"\r\n    }, {\r\n        isHot: true,\r\n        type: \"object\",\r\n        description: \"Control Change [controller, value]: Iterable<number>\"\r\n    }, {\r\n        isHot: true,\r\n        type: \"number\",\r\n        description: \"Program Change\"\r\n    }, {\r\n        isHot: true,\r\n        type: \"number\",\r\n        description: \"Aftertouch\"\r\n    }, {\r\n        isHot: true,\r\n        type: \"number\",\r\n        description: \"Pitch Bend\"\r\n    }, {\r\n        isHot: false,\r\n        type: \"number\",\r\n        description: \"MIDI Channel\"\r\n    }];\r\n    static props: IPropsMeta<P> = {\r\n        hires: {\r\n            type: \"enum\",\r\n            enums: [\"off\", \"float\", \"14bit\"],\r\n            default: \"off\",\r\n            description: \"High-resolution Pitch Bend (Off (0-127), Float (-1 to 1), 14-bit Fixed (-8192 to 8191))\"\r\n        }\r\n    };\r\n    _: IS = { channel: 0 };\r\n    subscribe() {\r\n        super.subscribe();\r\n        this.on(\"preInit\", () => {\r\n            this.inlets = 7;\r\n            this.outlets = 1;\r\n        })\r\n        this.on(\"inlet\", ({ data, inlet }) => {\r\n            if (inlet < 3) {\r\n                try {\r\n                    let [data1, data2] = data as Iterable<number>;\r\n                    if (typeof data1 !== \"number\" || typeof data2 !== \"number\") {\r\n                        throw new Error(\"Input MIDI data is not numbers\");\r\n                    }\r\n                    data1 = Math.round(Math.max(0, Math.min(127, data1)));\r\n                    data2 = Math.round(Math.max(0, Math.min(127, data2)));\r\n                    if (inlet === 0) {\r\n                        this.outlet(0, new Uint8Array([0x90 + this._.channel, data1, data2]));\r\n                    } else if (inlet === 1) {\r\n                        this.outlet(0, new Uint8Array([0xa0 + this._.channel, data1, data2]));\r\n                    } else if (inlet === 2) {\r\n                        this.outlet(0, new Uint8Array([0xb0 + this._.channel, data1, data2]));\r\n                    }\r\n                } catch (e) {\r\n                    this.error(e);\r\n                }\r\n            } else if (inlet >= 3) {\r\n                if (typeof data !== \"number\") {\r\n                    this.error(\"Input MIDI data is not number\");\r\n                    return;\r\n                }\r\n                const data1 = Math.round(Math.max(0, Math.min(127, data))); \r\n                if (inlet === 3) {\r\n                    this.outlet(0, new Uint8Array([0xc0 + this._.channel, data1]));\r\n                } else if (inlet === 4) {\r\n                    this.outlet(0, new Uint8Array([0xd0 + this._.channel, data1]));\r\n                } else if (inlet === 5) {\r\n                    const hires = this.getProp(\"hires\");\r\n                    if (hires === \"off\") {\r\n                        this.outlet(0, new Uint8Array([0xe0 + this._.channel, 0, data1]));\r\n                    } else if (hires === \"float\") {\r\n                        const data = ~~((Math.max(-1, Math.min(1, data1)) + 1) * 0.5 * 16383);\r\n                        this.outlet(0, new Uint8Array([0xe0 + this._.channel, data & 0x7f, data >> 7]));\r\n                    } else {\r\n                        const data = ~~Math.max(-8192, Math.min(8191, data1)) + 8192;\r\n                        this.outlet(0, new Uint8Array([0xe0 + this._.channel, data & 0x7f, data >> 7]));\r\n                    }\r\n                } else if (inlet === 6) {\r\n                    this._.channel = Math.min(15, data1 - 1);\r\n                }\r\n            }\r\n        })\r\n    }\r\n}\r\n","import type { IArgsMeta, IInletsMeta, IOutletsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\r\nimport { Bang, isBang } from \"../sdk\";\r\nimport MidiObject from \"./Base\";\r\n\r\ninterface IS {\r\n    midiAccess: WebMidi.MIDIAccess;\r\n    search: string;\r\n    port: WebMidi.MIDIInput;\r\n}\r\n\r\nexport default class midiIn extends MidiObject<{}, {}, [string | Bang], [Uint8Array, WebMidi.MIDIInput], [string]> {\r\n    static description = \"Get MIDI input from device name or ID\";\r\n    static inlets: IInletsMeta = [{\r\n        isHot: true,\r\n        type: \"anything\",\r\n        description: \"string to fetch device name or ID, bang to output MIDI port instance\"\r\n    }];\r\n    static outlets: IOutletsMeta = [{\r\n        type: \"object\",\r\n        description: \"MIDI message: Uint8Array\"\r\n    }, {\r\n        type: \"object\",\r\n        description: \"Instance: MIDIPort\"\r\n    }];\r\n    static args: IArgsMeta = [{\r\n        type: \"string\",\r\n        optional: false,\r\n        description: \"Device name or ID\"\r\n    }];\r\n    _: IS = { midiAccess: undefined as WebMidi.MIDIAccess, search: undefined as string, port: undefined as WebMidi.MIDIInput };\r\n    handleDeviceChange = async () => {\r\n        const { midiAccess } = this._;\r\n        if (!midiAccess) {\r\n            this.error(\"MIDIAccess not available.\");\r\n            return;\r\n        }\r\n        const devices: WebMidi.MIDIInput[] = [];\r\n        midiAccess.inputs.forEach(v => devices.push(v));\r\n        const enums = devices.map(d => d.name || d.id);\r\n        const { meta } = this;\r\n        meta.args[0] = { ...midiIn.args[0], type: \"enum\", enums };\r\n        this.setMeta(meta);\r\n    };\r\n    handleMIDIMessage = (e: WebMidi.MIDIMessageEvent) => this.outlet(0, e.data);\r\n    newSearch = async (search?: string) => {\r\n        this._.search = search;\r\n        const { midiAccess } = this._;\r\n        if (!midiAccess) {\r\n            this.error(\"MIDIAccess not available.\");\r\n            return;\r\n        }\r\n        const devices: WebMidi.MIDIInput[] = [];\r\n        midiAccess.inputs.forEach(v => devices.push(v));\r\n        for (let i = 0; i < devices.length; i++) {\r\n            const port = devices[i];\r\n            if (!search || port.id === search || port.name === search) {\r\n                if (port !== this._.port) {\r\n                    if (this._.port) this._.port.removeEventListener(\"midimessage\", this.handleMIDIMessage);\r\n                    this._.port = port;\r\n                    port.addEventListener(\"midimessage\", this.handleMIDIMessage);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    };\r\n    subscribe() {\r\n        super.subscribe();\r\n        this.on(\"preInit\", () => {\r\n            this.inlets = 1;\r\n            this.outlets = 2;\r\n        });\r\n        this.on(\"postInit\", async () => {\r\n            const search = this.args[0];\r\n            try {\r\n                const midiAccess = await navigator.requestMIDIAccess({ sysex: true });\r\n                this._.midiAccess = midiAccess;\r\n                midiAccess.addEventListener(\"statechange\", this.handleDeviceChange);\r\n                this.handleDeviceChange();\r\n                this.newSearch(search);\r\n            } catch (e) {\r\n                this.error(e);\r\n            }\r\n        });\r\n        this.on(\"updateArgs\", (args: [string?]) => {\r\n            this.newSearch(args[0]);\r\n        });\r\n        this.on(\"updateProps\", () => {\r\n            this.newSearch(this._.search);\r\n        });\r\n        this.on(\"inlet\", async ({ data, inlet }) => {\r\n            if (inlet === 0) {\r\n                if (!isBang(data)) {\r\n                    await this.newSearch(data);\r\n                }\r\n                if (this._.port) this.outlet(1, this._.port);\r\n            }\r\n        });\r\n        this.on(\"destroy\", () => {\r\n            if (this._.midiAccess) this._.midiAccess.removeEventListener(\"statechange\", this.handleDeviceChange);\r\n            if (this._.port) this._.port.removeEventListener(\"midimessage\", this.handleMIDIMessage);\r\n        });\r\n    }\r\n}\r\n","import type { IArgsMeta, IInletsMeta, IOutletsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\r\nimport { Bang, isBang } from \"../sdk\";\r\nimport MidiObject from \"./Base\";\r\n\r\ninterface IS {\r\n    midiAccess: WebMidi.MIDIAccess;\r\n    search: string;\r\n    port: WebMidi.MIDIOutput;\r\n    timestamp: number;\r\n}\r\n\r\nexport default class midiOut extends MidiObject<{}, IS, [Uint8Array | number[] | string | Bang, number], [WebMidi.MIDIOutput], [string]> {\r\n    static description = \"Get MIDI output from device name or ID\";\r\n    static inlets: IInletsMeta = [{\r\n        isHot: true,\r\n        type: \"anything\",\r\n        description: \"Uint8Array or number[] to output MIDI message, string to fetch device name or ID, bang to output MIDI port instance\"\r\n    }, {\r\n        isHot: false,\r\n        type: \"number\",\r\n        description: \"The time at which to begin sending the data to the port. 0 or past means immediate send.\"\r\n    }];\r\n    static outlets: IOutletsMeta = [{\r\n        type: \"object\",\r\n        description: \"Instance: MIDIPort\"\r\n    }];\r\n    static args: IArgsMeta = [{\r\n        type: \"string\",\r\n        optional: false,\r\n        description: \"Device name or ID\"\r\n    }];\r\n    _: IS = { midiAccess: undefined as WebMidi.MIDIAccess, search: undefined as string, port: undefined as WebMidi.MIDIOutput, timestamp: 0 };\r\n    handleDeviceChange = async () => {\r\n        const { midiAccess } = this._;\r\n        if (!midiAccess) {\r\n            this.error(\"MIDIAccess not available.\");\r\n            return;\r\n        }\r\n        const devices: WebMidi.MIDIOutput[] = [];\r\n        midiAccess.outputs.forEach(v => devices.push(v));\r\n        const enums = devices.map(d => d.name || d.id);\r\n        const { meta } = this;\r\n        meta.args[0] = { ...midiOut.args[0], type: \"enum\", enums };\r\n        this.setMeta(meta);\r\n    };\r\n    newSearch = async (search?: string) => {\r\n        this._.search = search;\r\n        const { midiAccess } = this._;\r\n        if (!midiAccess) {\r\n            this.error(\"MIDIAccess not available.\");\r\n            return;\r\n        }\r\n        const devices: WebMidi.MIDIOutput[] = [];\r\n        midiAccess.outputs.forEach(v => devices.push(v));\r\n        for (let i = 0; i < devices.length; i++) {\r\n            const port = devices[i];\r\n            if (!search || port.id === search || port.name === search) {\r\n                this._.port = port;\r\n                break;\r\n            }\r\n        }\r\n    };\r\n    subscribe() {\r\n        super.subscribe();\r\n        this.on(\"preInit\", () => {\r\n            this.inlets = 1;\r\n            this.outlets = 1;\r\n        });\r\n        this.on(\"postInit\", async () => {\r\n            const search = this.box.args[0];\r\n            try {\r\n                const midiAccess = await navigator.requestMIDIAccess({ sysex: true });\r\n                this._.midiAccess = midiAccess;\r\n                midiAccess.addEventListener(\"statechange\", this.handleDeviceChange);\r\n                this.handleDeviceChange();\r\n                this.newSearch(search);\r\n            } catch (e) {\r\n                this.error(e);\r\n            }\r\n        });\r\n        this.on(\"updateArgs\", (args: [string?]) => {\r\n            this.newSearch(args[0]);\r\n        });\r\n        this.on(\"updateProps\", () => {\r\n            this.newSearch(this._.search);\r\n        });\r\n        this.on(\"inlet\", async ({ data, inlet }) => {\r\n            if (inlet === 0) {\r\n                if (!isBang(data)) {\r\n                    if (typeof data === \"string\") {\r\n                        await this.newSearch(data);\r\n                    } else {\r\n                        if (this._.port) this._.port.send(data as Uint8Array | number[]);\r\n                        return;\r\n                    }\r\n                }\r\n                if (this._.port) this.outlet(0, this._.port);\r\n            } else if (inlet === 1) {\r\n                this._.timestamp = +data || 0 as number;\r\n            }\r\n        });\r\n        this.on(\"destroy\", () => {\r\n            if (this._.midiAccess) this._.midiAccess.removeEventListener(\"statechange\", this.handleDeviceChange);\r\n        });\r\n    }\r\n}\r\n","import type { IInletsMeta, IOutletsMeta, IPropsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\r\nimport { Utils } from \"../sdk\";\r\nimport MidiObject from \"./Base\";\r\n\r\ntype I = [Iterable<number>];\r\n\r\ntype O = [[number, number], [number, number], [number, number], number, number, number, number];\r\n\r\ninterface P {\r\n    hires: \"off\" | \"float\" | \"14bit\";\r\n}\r\n\r\nexport default class midiParse extends MidiObject<{}, {}, I, O, [string], P> {\r\n    static description = \"Interpret raw MIDI data\";\r\n    static inlets: IInletsMeta = [{\r\n        isHot: true,\r\n        type: \"anything\",\r\n        description: \"Raw MIDI message: Iterable<number>\"\r\n    }];\r\n    static outlets: IOutletsMeta = [{\r\n        type: \"object\",\r\n        description: \"Note-on and Note-off [pitch, velocity]: Uint8Array\"\r\n    }, {\r\n        type: \"object\",\r\n        description: \"Poly Key Pressure [key, value]: Uint8Array\"\r\n    }, {\r\n        type: \"object\",\r\n        description: \"Control Change [controller, value]: Uint8Array\"\r\n    }, {\r\n        type: \"number\",\r\n        description: \"Program Change\"\r\n    }, {\r\n        type: \"number\",\r\n        description: \"Aftertouch\"\r\n    }, {\r\n        type: \"number\",\r\n        description: \"Pitch Bend\"\r\n    }, {\r\n        type: \"number\",\r\n        description: \"MIDI Channel\"\r\n    }];\r\n    static props: IPropsMeta<P> = {\r\n        hires: {\r\n            type: \"enum\",\r\n            enums: [\"off\", \"float\", \"14bit\"],\r\n            default: \"off\",\r\n            description: \"High-resolution Pitch Bend (Off (0-127), Float (-1 to 1), 14-bit Fixed (-8192 to 8191))\"\r\n        }\r\n    };\r\n    subscribe() {\r\n        super.subscribe();\r\n        this.on(\"preInit\", () => {\r\n            this.inlets = 1;\r\n            this.outlets = 7;\r\n        })\r\n        this.on(\"inlet\", ({ data, inlet }) => {\r\n            if (inlet === 0) {\r\n                try {\r\n                    const [data0, data1, data2] = data;\r\n                    const eventType = data0 >> 4;\r\n                    const channel = data0 & 0x0f + 1;\r\n                    if (eventType === 0x08) {\r\n                        this.outlet(0, [data1, 0]);\r\n                    } else if (eventType === 0x09) {\r\n                        this.outlet(6, channel);\r\n                        this.outlet(0, [data1, data2]);\r\n                    } else if (eventType === 0x0a) {\r\n                        this.outlet(6, channel);\r\n                        this.outlet(1, [data1, data2]);\r\n                    } else if (eventType === 0x0b) {\r\n                        this.outlet(6, channel);\r\n                        this.outlet(2, [data1, data2]);\r\n                    } else if (eventType === 0x0c) {\r\n                        this.outlet(6, channel);\r\n                        this.outlet(3, data1);\r\n                    } else if (eventType === 0x0d) {\r\n                        this.outlet(6, channel);\r\n                        this.outlet(4, data1);\r\n                    } else if (eventType === 0x0e) {\r\n                        this.outlet(6, channel);\r\n                        const hires = this.getProp(\"hires\");\r\n                        if (hires === \"off\") this.outlet(5, data2);\r\n                        else if (hires === \"float\") this.outlet(5, (data1 + (data2 << 7)) / 16383 * 2 - 1)\r\n                        else this.outlet(5, -8192 + data1 + (data2 << 7));\r\n                    } else {\r\n                        this.error(`Unrecognised MIDI event type: ${eventType}`)\r\n                    }\r\n                } catch (e) {\r\n                    this.error(e);\r\n                }\r\n            }\r\n        })\r\n    }\r\n}\r\n","import * as JSON from \"../package.json\";\n\nexport default JSON;\n","import type { IJSPatcherSDK } from \"@jspatcher/jspatcher/src/core/SDK\";\r\n\r\nconst sdk = (globalThis as any).jspatcherEnv.sdk as IJSPatcherSDK;\r\nexport const {\r\n    React,\r\n    ReactDOM,\r\n    SemanticUI,\r\n    PatcherAudio,\r\n    OperableAudioBuffer,\r\n    Patcher,\r\n    Box,\r\n    Line,\r\n    BaseObject,\r\n    DefaultObject,\r\n    BaseUI,\r\n    DefaultUI,\r\n    CanvasUI,\r\n    CodeUI,\r\n    DefaultPopupUI,\r\n    CodePopupUI,\r\n    DOMUI,\r\n    generateDefaultObject,\r\n    generateRemoteObject,\r\n    generateRemotedObject,\r\n    Bang,\r\n    isBang,\r\n    TransmitterNode,\r\n    TemporalAnalyserNode,\r\n    SpectralAnalyserNode,\r\n    MathUtils,\r\n    BufferUtils,\r\n    Utils,\r\n    getReactMonacoEditor\r\n} = sdk;\r\n\r\nexport interface Bang extends InstanceType<typeof Bang> {}\r\nexport interface PatcherAudio extends InstanceType<typeof PatcherAudio> {}\r\nexport interface OperableAudioBuffer extends InstanceType<typeof OperableAudioBuffer> {}\r\nexport interface Patcher extends InstanceType<typeof Patcher> {}\r\nexport interface Box extends InstanceType<typeof Box> {}\r\nexport interface Line extends InstanceType<typeof Line> {}\r\nexport interface BaseObject extends InstanceType<typeof BaseObject> {}\r\nexport interface TransmitterNode extends InstanceType<typeof TransmitterNode> {}\r\nexport interface TemporalAnalyserNode extends InstanceType<typeof TemporalAnalyserNode> {}\r\nexport interface SpectralAnalyserNode extends InstanceType<typeof SpectralAnalyserNode> {}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n\t}\n\tdef['default'] = () => (value);\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import midiDevices from \"./objects/devices\";\nimport midiFormat from \"./objects/midiFormat\";\nimport midiIn from \"./objects/midiIn\";\nimport midiOut from \"./objects/midiOut\";\nimport midiParse from \"./objects/midiparse\";\n\nexport default async () => {\n    return {\n        midiDevices,\n        midiIn,\n        midiin: midiIn,\n        midiOut,\n        midiout: midiOut,\n        midiFormat,\n        midiformat: midiFormat,\n        midiParse,\n        midiparse: midiParse,\n    };\n};"],"names":[],"sourceRoot":""}