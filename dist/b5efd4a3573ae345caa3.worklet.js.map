{"version":3,"file":"b5efd4a3573ae345caa3.worklet.js","mappings":"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","sources":["webpack://@jspatcher/package-midi/webpack/bootstrap","webpack://@jspatcher/package-midi/webpack/runtime/define property getters","webpack://@jspatcher/package-midi/webpack/runtime/hasOwnProperty shorthand","webpack://@jspatcher/package-midi/webpack/runtime/make namespace object","webpack://@jspatcher/package-midi/./src/worklets/MidiSequencerProcessor.worklet.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import type { AudioWorkletGlobalScope, TypedAudioParamDescriptor, TypedMessageEvent } from \"@jspatcher/jspatcher/src/core/worklets/TypedAudioWorklet\";\r\nimport type { MidiChannelEvent, MidiData } from \"./MidiParser\";\r\nimport type { MsgIn, MsgOut, Parameters } from \"./MIdiSequencer.types\";\r\n\r\nexport const processorId = \"__JSPatcher_package-midi_MidiSequencer\";\r\n\r\nconst audioWorkletGlobalScope = globalThis as unknown as AudioWorkletGlobalScope;\r\nconst { registerProcessor, sampleRate } = audioWorkletGlobalScope;\r\nconst AudioWorkletProcessor = audioWorkletGlobalScope.AudioWorkletProcessor;\r\n\r\nclass MidiSequencerProcessor extends AudioWorkletProcessor<MsgIn, MsgOut, Parameters> {\r\n    static get parameterDescriptors(): TypedAudioParamDescriptor<Parameters>[] {\r\n        return [{\r\n            name: \"playing\",\r\n            minValue: 0,\r\n            maxValue: 1,\r\n            defaultValue: 0\r\n        }, {\r\n            name: \"loop\",\r\n            minValue: 0,\r\n            maxValue: 1,\r\n            defaultValue: 0\r\n        }];\r\n    }\r\n    playing = false;\r\n    loop = false;\r\n    data: MidiData = null;\r\n    orderedEvents: { data: Uint8Array; time: number }[] = [];\r\n    $event = 0;\r\n    timeOffset = 0;\r\n    totalDuration = 0;\r\n    handleMessage: (e: TypedMessageEvent<MsgIn>) => any;\r\n    constructor(options: AudioWorkletNodeOptions) {\r\n        super(options);\r\n        this.handleMessage = (e) => {\r\n            if (e.data.type === \"midiJson\") {\r\n                this.setData(e.data.data);\r\n            } else if (e.data.type === \"goto\") {\r\n                this.goto(e.data.data);\r\n            }\r\n        };\r\n        this.port.onmessage = this.handleMessage;\r\n    }\r\n    setData(data: MidiData) {\r\n        this.sendFlush();\r\n        this.data = data;\r\n        this.orderedEvents = [];\r\n        this.$event = 0;\r\n        this.timeOffset = 0;\r\n        this.totalDuration = data.duration;\r\n        data.tracks.forEach((track) => {\r\n            track.forEach((event: MidiChannelEvent<any>) => {\r\n                if (event.bytes) {\r\n                    this.orderedEvents.push({ time: event.time, data: event.bytes });\r\n                }\r\n            })\r\n        });\r\n        this.orderedEvents.sort((a, b) => a.time - b.time);\r\n    }\r\n    goto(time: number) {\r\n        this.sendFlush();\r\n        let $ = 0;\r\n        this.timeOffset = Math.min(time, this.totalDuration);\r\n        for (let i = 0; i < this.orderedEvents.length; i++) {\r\n            const event = this.orderedEvents[i];\r\n            if (event.time < this.timeOffset) $ = i;\r\n            else break;\r\n        }\r\n        this.$event = $;\r\n    }\r\n    onMidi(data: Uint8Array, time: number) {\r\n        this.port.postMessage({ type: \"midiMessage\", data: { bytes: data, time } })\r\n    }\r\n    sendFlush() {\r\n        const { currentTime } = audioWorkletGlobalScope;\r\n        this.onMidi(new Uint8Array([176, 121, 0]), currentTime); // All Controllers Reset\r\n        this.onMidi(new Uint8Array([176, 123, 0]), currentTime); // All Notes Off\r\n    }\r\n    advance(offset: number, playing: boolean, loop: boolean, fromTime: number) {\r\n        if (!playing) return;\r\n        if (this.timeOffset >= this.totalDuration) {\r\n            if (loop) {\r\n                this.timeOffset = 0;\r\n                this.$event = 0;\r\n            } else return;\r\n        }\r\n        if (!this.orderedEvents.length) return;\r\n        let advanced = 0;\r\n        while (advanced < offset) {\r\n            let $ = this.$event + 1;\r\n            let nextEventDeltaTime = 0;\r\n            let nextEvent = null;\r\n            const timeOffset = this.timeOffset + advanced;\r\n            if ($ >= this.orderedEvents.length) {\r\n                nextEventDeltaTime += this.totalDuration - timeOffset;\r\n                if (loop) {\r\n                    $ = 0;\r\n                    nextEvent = this.orderedEvents[$];\r\n                    const { time } = nextEvent;\r\n                    this.timeOffset -= this.totalDuration;\r\n                    nextEventDeltaTime += time;\r\n                }\r\n            } else {\r\n                nextEvent = this.orderedEvents[$];\r\n                const { time } = nextEvent;\r\n                nextEventDeltaTime += time - timeOffset;\r\n            }\r\n            if (advanced + nextEventDeltaTime < offset) {\r\n                if (nextEvent) {\r\n                    const { data } = nextEvent;\r\n                    this.onMidi(data, fromTime + advanced);\r\n                } else break;\r\n                this.$event = $;\r\n            }\r\n            advanced += nextEventDeltaTime;\r\n        }\r\n        this.timeOffset += offset;\r\n        if (loop) {\r\n            this.timeOffset %= this.totalDuration;\r\n        } else if (this.timeOffset > this.totalDuration) {\r\n            this.timeOffset = this.totalDuration;\r\n        }\r\n    }\r\n    updateTime() {\r\n        this.port.postMessage({ type: \"timeOffset\", data: this.timeOffset });\r\n    }\r\n    process(inputs: Float32Array[][], outputs: Float32Array[][], parameters: Record<Parameters, Float32Array>) {\r\n        const bufferSize = outputs[0][0].length;\r\n        const advanceTime = 1 / sampleRate;\r\n        const { currentTime } = audioWorkletGlobalScope;\r\n        for (let i = 0; i < bufferSize; i++) {\r\n            const fromTime = currentTime * advanceTime * i;\r\n            const playing = !!(i < parameters.playing.length ? parameters.playing[i] : parameters.playing[0]);\r\n            if (playing !== this.playing && !playing) this.onMidi(new Uint8Array([176, 123, 0]), fromTime); // All Notes Off\r\n            this.playing = playing;\r\n            const loop = !!(i < parameters.loop.length ? parameters.loop[i] : parameters.loop[0]);\r\n            this.loop = loop;\r\n            this.advance(advanceTime, this.playing, this.loop, fromTime);\r\n        }\r\n        this.updateTime();\r\n        return true;\r\n    }\r\n}\r\ntry {\r\n    registerProcessor(processorId, MidiSequencerProcessor)\r\n} catch (error) {\r\n    console.warn(error);\r\n}\r\n"],"names":[],"sourceRoot":""}